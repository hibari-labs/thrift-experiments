%%
%% Autogenerated by Thrift Compiler (0.9.1)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(hibari_thrift).
-behaviour(thrift_service).


-include("hibari_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info('i am a dummy struct') -> undefined.
%%% interface
% keepalive(This)
function_info('keepalive', params_type) ->
  {struct, []}
;
function_info('keepalive', reply_type) ->
  oneway_void;
function_info('keepalive', exceptions) ->
  {struct, []}
;
% info(This)
function_info('info', params_type) ->
  {struct, []}
;
function_info('info', reply_type) ->
  string;
function_info('info', exceptions) ->
  {struct, []}
;
% description(This)
function_info('description', params_type) ->
  {struct, []}
;
function_info('description', reply_type) ->
  string;
function_info('description', exceptions) ->
  {struct, []}
;
% contract(This)
function_info('contract', params_type) ->
  {struct, []}
;
function_info('contract', reply_type) ->
  string;
function_info('contract', exceptions) ->
  {struct, []}
;
% add_kv(This, Table, Key, Value, Properties, Write_options)
function_info('add_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'property'}}}},
          {5, {struct, {'hibari_types', 'writeOptions'}}}]}
;
function_info('add_kv', reply_type) ->
  i64;
function_info('add_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'invalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'keyExistisException'}}}]}
;
% replace_kv(This, Table, Key, Value, Properties, Write_options)
function_info('replace_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'property'}}}},
          {5, {struct, {'hibari_types', 'writeOptions'}}}]}
;
function_info('replace_kv', reply_type) ->
  i64;
function_info('replace_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'invalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'keyNotExistsException'}}},
          {5, {struct, {'hibari_types', 'tSErrorException'}}}]}
;
% rename_kv(This, Table, Key, New_key, Properties, Write_options)
function_info('rename_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'property'}}}},
          {5, {struct, {'hibari_types', 'writeOptions'}}}]}
;
function_info('rename_kv', reply_type) ->
  i64;
function_info('rename_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'invalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'keyNotExistsException'}}},
          {5, {struct, {'hibari_types', 'tSErrorException'}}}]}
;
% set_kv(This, Table, Key, Value, Properties, Write_options)
function_info('set_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'property'}}}},
          {5, {struct, {'hibari_types', 'writeOptions'}}}]}
;
function_info('set_kv', reply_type) ->
  i64;
function_info('set_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'invalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'tSErrorException'}}}]}
;
% delete_kv(This, Table, Key, Write_options)
function_info('delete_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'hibari_types', 'writeOptions'}}}]}
;
function_info('delete_kv', reply_type) ->
  {struct, []};
function_info('delete_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'invalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'keyNotExistsException'}}},
          {5, {struct, {'hibari_types', 'tSErrorException'}}}]}
;
% get_kv(This, Table, Key, Read_options)
function_info('get_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'hibari_types', 'readOptions'}}}]}
;
function_info('get_kv', reply_type) ->
  {struct, {'hibari_types', 'getResponse'}};
function_info('get_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'keyNotExistsException'}}},
          {4, {struct, {'hibari_types', 'tSErrorException'}}}]}
;
% get_many(This, Table, Key, Max_keys, Read_options)
function_info('get_many', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, {struct, {'hibari_types', 'readOptions'}}}]}
;
function_info('get_many', reply_type) ->
  {struct, {'hibari_types', 'getManyResponse'}};
function_info('get_many', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'tSErrorException'}}}]}
;
% do_ops(This, Table, Do_operations, Do_options)
function_info('do_ops', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hibari_types', 'op'}}}},
          {3, {struct, {'hibari_types', 'doOptions'}}}]}
;
function_info('do_ops', reply_type) ->
  {struct, {'hibari_types', 'doResponse'}};
function_info('do_ops', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'serviceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'timedOutException'}}},
          {3, {struct, {'hibari_types', 'transactionFailureException'}}}]}
;
function_info(_Func, _Info) -> no_function.

